# Reading C:/altera/12.0/modelsim_ase/tcl/vsim/pref.tcl 
# do ProcessorV1_run_msim_gate_vhdl.do 
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Copying c:\altera\12.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied c:\altera\12.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {ProcessorV1.vho}
# Model Technology ModelSim ALTERA vcom 10.0d Compiler 2012.01 Jan 18 2012
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package VITAL_Timing
# -- Loading package VITAL_Primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity ProcessorV1
# -- Compiling architecture structure of ProcessorV1
# 
# do "C:/Users/sbrown/Documents/GitHub/smpproject/ProcessorProject/ProcessorV1_restored/ProcessorV1.do"
# vsim ProcessorV1
# vsim ProcessorV1 
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processorv1(structure)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# ** Warning: Design size of 1 instances exceeds ModelSim ALTERA recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim Altera version. Expect performance to be adversely affected.
# view wave 
# .main_pane.wave.interior.cs.body.pw.wf
# 
# add wave  reset
# 
# add wave  clock
# add wave  instruction
# add wave  regYOut
# add wave  regZOut
# 
# add wave  IRB
# add wave  IRA
# add wave  IRDest
# 
# add wave  RF1
# add wave  RF2
# 
# add wave regA
# add wave regB
# 
# add wave ALUOut
# add wave regDest 
# add wave SelectRegOrImmed
# 
# add wave alu_op
# add wave a_inv
# add wave b_inv
# 
# Test reset at 150 cycles 
# force clock 	0 0, 1 20 -repeat 40 
# force reset 	 0
# force enable 	 1
# 
# test add instruction
# $rd = $ra + $rb
# add cond  ra   rb   rd  add s
#1010 0000 0000 0000 0010 100 0
# $rd = 15 + 15 dest reg is reg2
#force instruction 101000000000000000101000
# 
# test add instruction
# $rd = $ra + $rb
# add cond  ra   rb   rd  add s
#1010 0000 0000 0000 0011 100 0
# $rd = 15 + 15 dest reg is reg3
# force instruction 101000000000000000111000
# 
# test and instruction
# $rd = 15 and 15 
# add cond  ra   rb   rd  and s
#1010 0000 0000 0000 0010 010 0
#force instruction 101000000000000000100100
# 
# test OR instruction
# $rd = 15 and 15 
# add cond  ra   rb   rd  OR s
#1010 0000 0000 0000 0010 011 0
#force instruction 101000000000000000100110
# 
# test XOR instruction
# $rd = 15 and 15 
# add cond  ra   rb   rd  XOR s
#1010 0000 0000 0000 0010 001 0
#force instruction 101000000000000000100010
# 
# test D type addi intsruction
# op  cond  rs   rd   immi   s
#                       +7   
#1100 0000 0000 0001 0000111 0
#force instruction 110000000000000100001110
# 
# 
# run 400
#  
